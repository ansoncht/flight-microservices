// Code generated by MockGen. DO NOT EDIT.
// Source: internal/reader/client/route.go
//
// Generated by this command:
//
//	mockgen -source internal/reader/client/route.go -destination=internal/reader/service/mock/mock_route_client.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/ansoncht/flight-microservices/internal/reader/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRoutesClient is a mock of RoutesClient interface.
type MockRoutesClient struct {
	ctrl     *gomock.Controller
	recorder *MockRoutesClientMockRecorder
	isgomock struct{}
}

// MockRoutesClientMockRecorder is the mock recorder for MockRoutesClient.
type MockRoutesClientMockRecorder struct {
	mock *MockRoutesClient
}

// NewMockRoutesClient creates a new mock instance.
func NewMockRoutesClient(ctrl *gomock.Controller) *MockRoutesClient {
	mock := &MockRoutesClient{ctrl: ctrl}
	mock.recorder = &MockRoutesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoutesClient) EXPECT() *MockRoutesClientMockRecorder {
	return m.recorder
}

// FetchRoute mocks base method.
func (m *MockRoutesClient) FetchRoute(ctx context.Context, callsign string) (*model.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchRoute", ctx, callsign)
	ret0, _ := ret[0].(*model.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRoute indicates an expected call of FetchRoute.
func (mr *MockRoutesClientMockRecorder) FetchRoute(ctx, callsign any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRoute", reflect.TypeOf((*MockRoutesClient)(nil).FetchRoute), ctx, callsign)
}
