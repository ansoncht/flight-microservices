// Code generated by MockGen. DO NOT EDIT.
// Source: internal/reader/client/flight.go
//
// Generated by this command:
//
//	mockgen -source internal/reader/client/flight.go -destination=internal/reader/service/mock/mock_flight_client.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/ansoncht/flight-microservices/internal/reader/model"
	gomock "go.uber.org/mock/gomock"
)

// MockFlightsClient is a mock of FlightsClient interface.
type MockFlightsClient struct {
	ctrl     *gomock.Controller
	recorder *MockFlightsClientMockRecorder
	isgomock struct{}
}

// MockFlightsClientMockRecorder is the mock recorder for MockFlightsClient.
type MockFlightsClientMockRecorder struct {
	mock *MockFlightsClient
}

// NewMockFlightsClient creates a new mock instance.
func NewMockFlightsClient(ctrl *gomock.Controller) *MockFlightsClient {
	mock := &MockFlightsClient{ctrl: ctrl}
	mock.recorder = &MockFlightsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlightsClient) EXPECT() *MockFlightsClientMockRecorder {
	return m.recorder
}

// FetchFlights mocks base method.
func (m *MockFlightsClient) FetchFlights(ctx context.Context, airportCode, start, end string) ([]model.Flight, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFlights", ctx, airportCode, start, end)
	ret0, _ := ret[0].([]model.Flight)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFlights indicates an expected call of FetchFlights.
func (mr *MockFlightsClientMockRecorder) FetchFlights(ctx, airportCode, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFlights", reflect.TypeOf((*MockFlightsClient)(nil).FetchFlights), ctx, airportCode, start, end)
}
