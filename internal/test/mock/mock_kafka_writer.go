// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/kafka/writer.go
//
// Generated by this command:
//
//	mockgen -source pkg/kafka/writer.go -destination=internal/test/mock/mock_kafka_writer.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMessageWriter is a mock of MessageWriter interface.
type MockMessageWriter struct {
	ctrl     *gomock.Controller
	recorder *MockMessageWriterMockRecorder
	isgomock struct{}
}

// MockMessageWriterMockRecorder is the mock recorder for MockMessageWriter.
type MockMessageWriterMockRecorder struct {
	mock *MockMessageWriter
}

// NewMockMessageWriter creates a new mock instance.
func NewMockMessageWriter(ctrl *gomock.Controller) *MockMessageWriter {
	mock := &MockMessageWriter{ctrl: ctrl}
	mock.recorder = &MockMessageWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageWriter) EXPECT() *MockMessageWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMessageWriter) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockMessageWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMessageWriter)(nil).Close))
}

// WriteMessage mocks base method.
func (m *MockMessageWriter) WriteMessage(ctx context.Context, key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage.
func (mr *MockMessageWriterMockRecorder) WriteMessage(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockMessageWriter)(nil).WriteMessage), ctx, key, value)
}
