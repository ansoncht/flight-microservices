// Code generated by MockGen. DO NOT EDIT.
// Source: internal/processor/service/summarizer.go
//
// Generated by this command:
//
//	mockgen -source internal/processor/service/summarizer.go -destination=internal/test/mock/mock_summarizer.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model0 "github.com/ansoncht/flight-microservices/pkg/model"
	gomock "go.uber.org/mock/gomock"
)

// MockSummarizer is a mock of Summarizer interface.
type MockSummarizer struct {
	ctrl     *gomock.Controller
	recorder *MockSummarizerMockRecorder
	isgomock struct{}
}

// MockSummarizerMockRecorder is the mock recorder for MockSummarizer.
type MockSummarizerMockRecorder struct {
	mock *MockSummarizer
}

// NewMockSummarizer creates a new mock instance.
func NewMockSummarizer(ctrl *gomock.Controller) *MockSummarizer {
	mock := &MockSummarizer{ctrl: ctrl}
	mock.recorder = &MockSummarizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSummarizer) EXPECT() *MockSummarizerMockRecorder {
	return m.recorder
}

// SummarizeFlights mocks base method.
func (m *MockSummarizer) SummarizeFlights(records []model0.FlightRecord, date, airport string) (*model0.DailyFlightSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SummarizeFlights", records, date, airport)
	ret0, _ := ret[0].(*model0.DailyFlightSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SummarizeFlights indicates an expected call of SummarizeFlights.
func (mr *MockSummarizerMockRecorder) SummarizeFlights(records, date, airport any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SummarizeFlights", reflect.TypeOf((*MockSummarizer)(nil).SummarizeFlights), records, date, airport)
}
