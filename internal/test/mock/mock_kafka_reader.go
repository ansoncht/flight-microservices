// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/kafka/reader.go
//
// Generated by this command:
//
//	mockgen -source pkg/kafka/reader.go -destination=internal/test/mock/mock_kafka_reader.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	kgo "github.com/twmb/franz-go/pkg/kgo"
	gomock "go.uber.org/mock/gomock"
)

// MockMessageReader is a mock of MessageReader interface.
type MockMessageReader struct {
	ctrl     *gomock.Controller
	recorder *MockMessageReaderMockRecorder
	isgomock struct{}
}

// MockMessageReaderMockRecorder is the mock recorder for MockMessageReader.
type MockMessageReaderMockRecorder struct {
	mock *MockMessageReader
}

// NewMockMessageReader creates a new mock instance.
func NewMockMessageReader(ctrl *gomock.Controller) *MockMessageReader {
	mock := &MockMessageReader{ctrl: ctrl}
	mock.recorder = &MockMessageReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageReader) EXPECT() *MockMessageReaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockMessageReader) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockMessageReaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMessageReader)(nil).Close))
}

// ReadMessages mocks base method.
func (m *MockMessageReader) ReadMessages(ctx context.Context, msgChan chan<- kgo.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessages", ctx, msgChan)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadMessages indicates an expected call of ReadMessages.
func (mr *MockMessageReaderMockRecorder) ReadMessages(ctx, msgChan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessages", reflect.TypeOf((*MockMessageReader)(nil).ReadMessages), ctx, msgChan)
}
