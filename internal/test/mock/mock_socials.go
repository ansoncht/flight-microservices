// Code generated by MockGen. DO NOT EDIT.
// Source: internal/poster/client/socials.go
//
// Generated by this command:
//
//	mockgen -source internal/poster/client/socials.go -destination=internal/test/mock/mock_socials.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSocials is a mock of Socials interface.
type MockSocials struct {
	ctrl     *gomock.Controller
	recorder *MockSocialsMockRecorder
	isgomock struct{}
}

// MockSocialsMockRecorder is the mock recorder for MockSocials.
type MockSocialsMockRecorder struct {
	mock *MockSocials
}

// NewMockSocials creates a new mock instance.
func NewMockSocials(ctrl *gomock.Controller) *MockSocials {
	mock := &MockSocials{ctrl: ctrl}
	mock.recorder = &MockSocialsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSocials) EXPECT() *MockSocialsMockRecorder {
	return m.recorder
}

// PublishPost mocks base method.
func (m *MockSocials) PublishPost(ctx context.Context, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishPost", ctx, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishPost indicates an expected call of PublishPost.
func (mr *MockSocialsMockRecorder) PublishPost(ctx, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishPost", reflect.TypeOf((*MockSocials)(nil).PublishPost), ctx, content)
}
