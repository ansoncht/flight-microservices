name: Build

on:
  pull_request:
    branches:
      - main

jobs:
  changes:
    runs-on: ubuntu-latest

    outputs:
      app: ${{ steps.filter.outputs.changes }}

    steps:
      - name: Filter Directory
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            flight-reader:
              - 'cmd/flight-reader/**'
            flight-processor:
              - 'cmd/flight-processor/**'
            flight-poster:
              - 'cmd/flight-poster/**'
            pkg:
              - 'pkg/**'
            internal:
              - 'internal/**'

  build:
    needs: changes
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.app != '[]' }}
    strategy:
      fail-fast: true
      matrix:
        app: ${{ fromJSON(needs.changes.outputs.app) }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.23'

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.61
          skip-pkg-cache: true
          skip-build-cache: true

      - name: Build
        if: ${{ matrix.app != 'pkg' && matrix.app != 'internal' }}
        run: go build -v ./...
        working-directory: cmd/${{ matrix.app }}

      - name: Build (internal)
        if: ${{ matrix.app == 'internal' }}
        run: go build -v ./...
        working-directory: internal

      - name: Build (pkg)
        if: ${{ matrix.app == 'pkg' }}
        run: go build -v ./...
        working-directory: pkg

      - name: Test
        if: ${{ matrix.app != 'pkg' && matrix.app != 'internal' }}
        run: go test -v ./...
        working-directory: cmd/${{ matrix.app }}

      - name: Test (internal)
        if: ${{ matrix.app == 'internal' }}
        run: go test -v ./...
        working-directory: internal

      - name: Test (pkg)
        if: ${{ matrix.app == 'pkg' }}
        run: go test -v ./...
        working-directory: pkg

  approve:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ always() }}

    steps:
      - name: Approve Build
        if: ${{ needs.build.result == 'success' || needs.build.result == 'skipped'}}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '# ✅ Build Succeeded!'
            })
            process.exit(0)

      - name: Fail Build
        if: ${{ needs.build.result == 'failure' }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '# ❌ Build Failed!'
            })
            process.exit(1)
